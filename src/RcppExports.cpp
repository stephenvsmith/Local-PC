// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_partial_correlation
double get_partial_correlation(arma::mat C, int i, int j, arma::uvec k);
RcppExport SEXP _LocalPC_get_partial_correlation(SEXP CSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(get_partial_correlation(C, i, j, k));
    return rcpp_result_gen;
END_RCPP
}
// fisherZ
double fisherZ(double pc, int n, int k_size);
RcppExport SEXP _LocalPC_fisherZ(SEXP pcSEXP, SEXP nSEXP, SEXP k_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k_size(k_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(fisherZ(pc, n, k_size));
    return rcpp_result_gen;
END_RCPP
}
// condIndTest
List condIndTest(arma::mat C, int i, int j, arma::uvec k, int n, double signif_level);
RcppExport SEXP _LocalPC_condIndTest(SEXP CSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP, SEXP nSEXP, SEXP signif_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type signif_level(signif_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(condIndTest(C, i, j, k, n, signif_level));
    return rcpp_result_gen;
END_RCPP
}
// pc_pop_get_skeleton_cpp
List pc_pop_get_skeleton_cpp(List var_list);
RcppExport SEXP _LocalPC_pc_pop_get_skeleton_cpp(SEXP var_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type var_list(var_listSEXP);
    rcpp_result_gen = Rcpp::wrap(pc_pop_get_skeleton_cpp(var_list));
    return rcpp_result_gen;
END_RCPP
}
// pc_sample_get_skeleton_cpp
List pc_sample_get_skeleton_cpp(List var_list, arma::mat df, double signif_level);
RcppExport SEXP _LocalPC_pc_sample_get_skeleton_cpp(SEXP var_listSEXP, SEXP dfSEXP, SEXP signif_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type var_list(var_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< double >::type signif_level(signif_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(pc_sample_get_skeleton_cpp(var_list, df, signif_level));
    return rcpp_result_gen;
END_RCPP
}
// pc_pop_cpp
List pc_pop_cpp(NumericMatrix true_dag, StringVector names, int lmax, bool verbose, bool verbose_small);
RcppExport SEXP _LocalPC_pc_pop_cpp(SEXP true_dagSEXP, SEXP namesSEXP, SEXP lmaxSEXP, SEXP verboseSEXP, SEXP verbose_smallSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_small(verbose_smallSEXP);
    rcpp_result_gen = Rcpp::wrap(pc_pop_cpp(true_dag, names, lmax, verbose, verbose_small));
    return rcpp_result_gen;
END_RCPP
}
// pc_sample_cpp
List pc_sample_cpp(NumericMatrix true_dag, arma::mat df, StringVector names, int lmax, double signif_level, bool verbose, bool verbose_small);
RcppExport SEXP _LocalPC_pc_sample_cpp(SEXP true_dagSEXP, SEXP dfSEXP, SEXP namesSEXP, SEXP lmaxSEXP, SEXP signif_levelSEXP, SEXP verboseSEXP, SEXP verbose_smallSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< double >::type signif_level(signif_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_small(verbose_smallSEXP);
    rcpp_result_gen = Rcpp::wrap(pc_sample_cpp(true_dag, df, names, lmax, signif_level, verbose, verbose_small));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _LocalPC_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _LocalPC_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _LocalPC_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _LocalPC_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LocalPC_get_partial_correlation", (DL_FUNC) &_LocalPC_get_partial_correlation, 4},
    {"_LocalPC_fisherZ", (DL_FUNC) &_LocalPC_fisherZ, 3},
    {"_LocalPC_condIndTest", (DL_FUNC) &_LocalPC_condIndTest, 6},
    {"_LocalPC_pc_pop_get_skeleton_cpp", (DL_FUNC) &_LocalPC_pc_pop_get_skeleton_cpp, 1},
    {"_LocalPC_pc_sample_get_skeleton_cpp", (DL_FUNC) &_LocalPC_pc_sample_get_skeleton_cpp, 3},
    {"_LocalPC_pc_pop_cpp", (DL_FUNC) &_LocalPC_pc_pop_cpp, 5},
    {"_LocalPC_pc_sample_cpp", (DL_FUNC) &_LocalPC_pc_sample_cpp, 7},
    {"_LocalPC_rcpparma_hello_world", (DL_FUNC) &_LocalPC_rcpparma_hello_world, 0},
    {"_LocalPC_rcpparma_outerproduct", (DL_FUNC) &_LocalPC_rcpparma_outerproduct, 1},
    {"_LocalPC_rcpparma_innerproduct", (DL_FUNC) &_LocalPC_rcpparma_innerproduct, 1},
    {"_LocalPC_rcpparma_bothproducts", (DL_FUNC) &_LocalPC_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_LocalPC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
